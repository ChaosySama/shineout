(window.webpackJsonpShineoutDoc=window.webpackJsonpShineoutDoc||[]).push([[55],{1163:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(557),i=t(559),l=t(40),s=t(1164),c=t.n(s),u=t(1165),d=t.n(u),p=Object(l.b)(c.a,d.a),m=[{name:"01-base",title:Object(l.b)("基本用法 \n 基础的文件上传, onSuccess 的返回值会作为 value 传给 onChange","Base \n Basic usage for uploading file, the onSuccess's returns will be the onChange params"),component:t(1166).default,rawText:t(1167)},{name:"01-onChange",title:Object(l.b)("自定义结果 \n 默认展示的结果和 value 里面所存储的值是一样的, 如果有需求需要, 可以用 renderResult 自行处理","Custom result \n The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself."),component:t(1168).default,rawText:t(1169)},{name:"02-image",title:Object(l.b)("上传图片 \n 使用 Upload.Image 处理带预览的图片上传","Image \n Use Upload.Image to upload and preview images."),component:t(1170).default,rawText:t(1171)},{name:"02-show-image",title:Object(l.b)("自定义结果内容 \n 使用  renderContent 可以自定义上传之后的图片结果.","Custom result content \n Use renderContent to customize the image results after uploading."),component:t(1172).default,rawText:t(1173)},{name:"03-button",title:Object(l.b)("按钮上传 \n 使用 Upload.Button 展示单个文件的上传进度","Button \n Use Upload.Button to show the upload progress of individual files"),component:t(1174).default,rawText:t(1175)},{name:"03-confirm",title:Object(l.b)("删除确认 \n 设置 removeConfirm 属性来开启删除前确认","Remove Confirm \n Set the removeConfirm property to enable confirmation before deleting"),component:t(1176).default,rawText:t(1177)},{name:"04-validator",title:Object(l.b)("校验 \n 通过 validator.imageSize 校验图片长宽，本例为 200px * 100px","Validator \n Set validator.imageSize to validate the width and height of the image."),component:t(1178).default,rawText:t(1179)},{name:"05-filesize",title:Object(l.b)("文件大小 \n 文件大小校验，本例为 10KB"," \n Set validator.size to validate the size of the file. This example is 10KB."),component:t(1180).default,rawText:t(1181)},{name:"06-error",title:Object(l.b)("异常处理 \n onHttpError 用来处理上传到服务器返回的异常","Error \n Set onHttpError to handle exceptions returned by uploading to the server."),component:t(1182).default,rawText:t(1183)},{name:"08-request-a",title:Object(l.b)("自定义上传 \n 通过 request 函数，替代默认上传方法","Custom Request \n Set request property to use your own XMLHttpRequest."),component:t(1184).default,rawText:t(1185)},{name:"08-request-ignore",title:Object(l.b)(" \n 使用 request 略过上传过程"," \n ignore request with request"),component:t(1186).default,rawText:t(1187)},{name:"09-zip",title:Object(l.b)(" \n 此事例演示通过自定义函数压缩文件后上传"," \n Zip file and upload."),component:t(1188).default,rawText:t(1189)},{name:"10-defaultValue",title:Object(l.b)("默认值 \n 默认值示例","defaultValue \n defaultValue example"),component:t(1190).default,rawText:t(1191)},{name:"11-dragger",title:Object(l.b)("拖拽上传 \n 设置 drop 来支持拖拽上传","Drag and Drop \n set drop to Drag files to upload."),component:t(1192).default,rawText:t(1193)}];n.default=Object(r.a)(function(e){return a.a.createElement(i.b,Object.assign({},e,{codes:void 0,source:p,examples:m}))})},1164:function(e,n){e.exports="# Upload\n\n<br />\n\n本页中的示例服务端限制为 10 KB，大于此限制的文件会上传失败\n\n<example />\n\n## API\n\n### Upload\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| accept | string | 无 | 上传文件类型, 和标准一致, 详见[accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) |\n| action | ((file: File) => string) \\| string | 必填 | 上传地址 |\n| children | ReactNode | 必填 | 上传占位内容 |\n| className | string | 无 | 扩展className |\n| defaultValue | any[] | 无 | 默认值 |\n| headers | object | 无 | 请求头部信息 |\n| htmlName | string | 无 | 服务端接收的 filename，不填使用 name |\n| limit | number | 100 | 最大上传文件数 |\n| disabled | boolean | false | 是否禁用上传行为 |\n| name | string | 无 | Form 内存取数据的 key |\n| request | (options: object) => void | 无 | 自定义上传方法<br /> options: 上传的配置 |\n| onChange | (values: any[]) => void | 无 | 值改变回调(上传成功，删除)<br />values: 数组, 其每个值是 onSuccess 的返回值 |\n| onSuccess | (res: string, file: File, data: any, xhr: any) => any | 无 | 上传成功回调，返回结果作为新的 value<br />res: 上传接口返回结果<br />file: 选择的文件<br />data: 请求的数据<br />xhr: 返回的 response |\n| onHttpError | (xhr: any) => string | 无 | 上传失败时回调，返回结果作为错误内容提示 |\n| params | object | 无 | 提交到服务端的额外参数 |\n| recoverAble | boolean | false | 是否可以恢复已删除的value |\n| renderResult | (data: any) => ReactNode | a => a | 结果展示 |\n| validator | object | 无 | 上传前文件校验 |\n| value | any[] | \\[] | defaultValue 和 value 可以同时设置，defaultValue 会被value覆盖<br />在Form中，value会被表单接管，value无效 |\n| withCredentials | boolean | false | 是否携带 cookie |\n| multiple | boolean | false | 是否支持多选文件 |\n| renderContent | (res: any, value: any, index: number, values: any[]) => ReactNode | - | 自定义结果的内容 |\n| validatorHandle | ((error: any, file: File) => boolean) \\| boolean | false | 是否处理校验失败的情况, 如果提供一个函数, 则以函数的返回值判断是否处理此 error |\n| drop | boolean | false | 是否开启拖拽上传文件 |\n| filesFilter | (fileList: any[]) => boolean | 无 | 文件选中后的筛选，用户可自定义最终需要上传的文件列表<br />需返回一个新的文件列表 |\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | 无 | 上传失败文件删除之后的回调 |\n| forceAccept | string | 无 | 在使用时关闭了 accept 提供的文件类型过滤后，强制对文件类型进行校验（值同accept） |\n| forceAcceptErrorMsg | string | 无 | forceAccept 类型校验失败后自定义错误提示 |\n| showUploadList | boolean | true | 是否展示上传列表 |\n| removeConfirm | string \\| object | 无 | 删除前是否进行确认提示 |\n| beforeRemove | (value: any) => Promise | 无 | 删除前的确认 |\n\n### Upload.Image\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| children | ReactNode | 无 | 上传按钮内容，可为空 |\n| renderResult | (data: any) => string | a => a | 返回图片 url 链接地址 |\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | none | 上传失败图片删除之后的回调 |\n| leftHandler | boolean | false | 添加图片视图是否在左侧展示 |\n| onPreview | (url, value, index, values) => void | none | 预览图片操作，默认为画廊展示 |\n| ignorePreview | boolean | false | 是否忽略上传图片预览 |\n\n### Upload.Button\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| type | 'default' \\| 'primary' \\| success' \\| 'warning' \\| 'danger' | primary | 按钮类型 |\n| placeholder | ReactNode | 无 | 按钮默认内容 |\n| loading | ReactNode | 无 | 上传中按钮的内容，如果是字符串默认会有spin loading |\n\n\n### UploadOptions\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| file |  File | 无 |  传入的文件 |\n| onLoad | function | 无 | 上传事件 |\n| onError | function | 无| 上传出错事件(props 中为 onHttpError) |\n| onProgress | function | 无 | 上传中进度 |\n| onSuccess | function | 无 | 上传成功事件 |\n| params | object | 无 | 上传参数 |\n| onStart | function | 无 | 开始上传事件 |\n| headers | object | 无 | 请求头部信息 |\n\n\n### validator 属性\n\n| 属性 | 类型 | 说明 |\n| --- | --- | --- |\n| ext | func(string):Error\\|Promise | 判断后缀名，传入参数为文件后缀，校验失败返回 Error |\n| size | func(number):Error\\|Promise | 判断文件大小，校验失败返回 Error |\n| imageSize | func(Image):Error | 只对 Image 有效，判断图片尺寸，校验失败返回 Error |\n| customValidator | func(File):Error\\|Promise | 自定义校验 |\n"},1165:function(e,n){e.exports="# Upload\n\n<example />\n\n## API\n\n### Upload\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| accept | string | none | The type of the upload file, same as the standard,See details [accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)  |\n| action | ((file: File) => string) \\| string | required | The address for uploading |\n| children | ReactNode | required | Upload placeholder |\n| className | string | none | Extend className |\n| defaultValue | any[] | -  | default value |\n| headers | object | none | Request headers |\n| htmlName | string | none | The filename received by the server. If it is not filled in, use the name. |\n| limit | number | 100 | Maximum number of uploaded files |\n| disabled | boolean | false | disabled upload action |\n| name | string | none | The key access data in the Form  |\n| request | (options: object) => void | - | Custom upload method<br /> options: the options of upload |\n| onChange | (values: any[]) => void | none | The callback function when the value is changing(Upload successfully, delete)<br />values: Array, the value is the onSuccess returns |\n| onSuccess |  (res: string, file: File, data: any, xhr: any) => any | none | The callback function when to upload successfully. The returned result is as the new value. <br />res: the result that the upload interface returns<br />file: selected file<br /> data: the request data<br /> xhr: reponse |\n| onHttpError | (xhr: any) => string | none | The callback function when to upload unsuccessfully. The returned result is as the error message. |\n| params | object | none | Additional parameters submitted to the server |\n| recoverAble | boolean | true | Whether to recover deleted values. |\n| renderResult | (data: any) => ReactNode | a => a | Display results |\n| validator | object | none | Check file before uploading |\n| value | any[] | \\[] | value |\n| withCredentials | boolean | false | Whether to take the cookie |\n| multiple | boolean | false | Whether multi-select files are supported |\n| renderContent | (res: any, value: any, index: number, values: any[]) => ReactNode | - | Custom content of result  |\n| validatorHandle | ((error: any, file: File) => boolean) \\| boolean  | true | Whether to handle the case of validation failure, if a function is provided, it is judged by the return value of the function. |\n| drop | boolean | false | drop to update |\n| filesFilter | (fileList: any[]) => boolean | none | Filter after file selection, users can customize the list of files that need to be uploaded eventually<br />Need to return a new file list |\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | none | remove update failed callback |\n| forceAccept | string | none | After disabled the file type filtering provided by accept, it is mandatory to check the file type, value same as accept |\n| forceAcceptErrorMsg | string | 无 | Custom error prompt after forceAccept type verification fails |\n| showUploadList | boolean | true | show upload list |\n| leftHandler | boolean | false | add image handler show left |\n| removeConfirm | string \\| object | none | confirmation before deletion |\n| beforeRemove | (value: any) => Promise | none | callback before remove |\n\n### Upload.Image\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| children | ReactNode | none | The content of the upload button. It can be empty. |\n| leftHandler | boolean | false | Add image view is displayed on the left |\n| renderResult | (data: any) => ReactNode | a => a | Return the link address of the url of the image.|\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | none | remove update failed callback |\n| onPreview | (url, value, index, values) => void | none | how to preview the image |\n| ignorePreview | boolean | false | ignore image preview |\n\n### Upload.Button\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | string | primary | options: \\['primary', success', 'default', 'warning', 'danger'\\] |\n| placeholder | ReactNode | none | button default content |\n| loading | ReactNode | none | content of uploading, will have spin if a string |\n\n\n### UploadOptions\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| file |  File | - |  the file |\n| onLoad | function | - | the event of uploading |\n| onError | function | - | the event of upload fail(in props is onHttpError) |\n| onProgress | function | - | the event of uploading progress |\n| onSuccess | function | - | the event of upload successing |\n| params | object | - | the request params |\n| onStart | function | - | the event of start upload |\n| headers | object | - | the request header |\n\n### Validator\n\n| Property | Type | Description |\n| --- | --- | --- |\n| ext | func(string):Error | Judge the file extension, return the Error when the verification fails. |\n| size | func(number):Error | Judge the size of the file and return the Error when the verification fails. |\n| imageSize | func(Image):Error | It is only valid for Image to determine the size of images and return the Error when the verification fails. |\n| customValidator | func(File):Error | custom validator |\n"},1166:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return f});var a=t(4),r=t(5),i=t(6),l=t(7),s=t(2),o=t(0),c=t.n(o),u=t(312),d=t(66),p=t(181);function m(o){return function(){var e,n=Object(s.a)(o);if(function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()){var t=Object(s.a)(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Object(l.a)(this,e)}}var f=function(e){Object(i.a)(o,e);var t=m(o);function o(e){var n;return Object(a.a)(this,o),(n=t.call(this,e)).state={value:[]},n}return Object(r.a)(o,[{key:"render",value:function(){var n=this;return c.a.createElement(u.a,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",value:this.state.value,name:"file",onSuccess:function(e,n){return n.name},onChange:function(e){console.log(e),n.setState({value:e})},limit:3,style:{width:300}},c.a.createElement(d.a,null,c.a.createElement(p.a,{name:"upload",style:{marginRight:4}}),"Upload file"))}}]),o}(c.a.Component)},1167:function(e,n){e.exports='/**\n * cn - 基本用法\n *    -- 基础的文件上传, onSuccess 的返回值会作为 value 传给 onChange\n * en - Base\n *    -- Basic usage for uploading file, the onSuccess\'s returns will be the onChange params\n\n */\nimport React from \'react\'\nimport { Upload, Button } from \'shineout\'\nimport FontAwesome from \'../Icon/FontAwesome\'\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: [],\n    }\n  }\n\n  render() {\n    return (\n      <Upload\n        action="//jsonplaceholder.typicode.com/posts"\n        accept="image/*"\n        value={this.state.value}\n        name="file"\n        onSuccess={(res, file) => file.name}\n        onChange={v => {\n          console.log(v)\n          this.setState({ value: v })\n        }}\n        limit={3}\n        style={{ width: 300 }}\n      >\n        <Button>\n          <FontAwesome name="upload" style={{ marginRight: 4 }} />\n          Upload file\n        </Button>\n      </Upload>\n    )\n  }\n}\n'},1168:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return f});var a=t(4),r=t(5),i=t(6),l=t(7),s=t(2),o=t(0),c=t.n(o),u=t(312),d=t(66),p=t(181);function m(o){return function(){var e,n=Object(s.a)(o);if(function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()){var t=Object(s.a)(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Object(l.a)(this,e)}}var f=function(e){Object(i.a)(o,e);var t=m(o);function o(e){var n;return Object(a.a)(this,o),(n=t.call(this,e)).state={value:[]},n}return Object(r.a)(o,[{key:"render",value:function(){var n=this;return c.a.createElement(u.a,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",value:this.state.value,name:"file",renderResult:function(e){return e.name},onSuccess:function(e,n){return n},onChange:function(e){console.log(e),n.setState({value:e})},limit:3,style:{width:300}},c.a.createElement(d.a,null,c.a.createElement(p.a,{name:"upload",style:{marginRight:4}}),"Upload file"))}}]),o}(c.a.Component)},1169:function(e,n){e.exports='/**\n * cn - 自定义结果\n *    -- 默认展示的结果和 value 里面所存储的值是一样的, 如果有需求需要, 可以用 renderResult 自行处理\n * en - Custom result\n *    -- The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself.\n\n */\nimport React from \'react\'\nimport { Upload, Button } from \'shineout\'\nimport FontAwesome from \'../Icon/FontAwesome\'\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: [],\n    }\n  }\n\n  render() {\n    return (\n      <Upload\n        action="//jsonplaceholder.typicode.com/posts"\n        accept="image/*"\n        value={this.state.value}\n        name="file"\n        renderResult={f => f.name}\n        onSuccess={(res, file) => file}\n        onChange={v => {\n          console.log(v)\n          this.setState({ value: v })\n        }}\n        limit={3}\n        style={{ width: 300 }}\n      >\n        <Button>\n          <FontAwesome name="upload" style={{ marginRight: 4 }} />\n          Upload file\n        </Button>\n      </Upload>\n    )\n  }\n}\n'},1170:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312);n.default=function(){return a.a.createElement(r.a.Image,{drop:!0,action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",name:"file",onSuccess:function(e,n,t){return{data:t}},renderResult:function(e){return e.data},limit:3,onStart:function(e){return console.log(e)}})}},1171:function(e,n){e.exports='/**\n * cn - 上传图片\n *    -- 使用 Upload.Image 处理带预览的图片上传\n * en - Image\n *    -- Use Upload.Image to upload and preview images.\n */\nimport React from \'react\'\nimport { Upload } from \'shineout\'\n\nexport default function() {\n  return (\n    <Upload.Image\n      drop\n      action="//jsonplaceholder.typicode.com/posts"\n      accept="image/*"\n      name="file"\n      onSuccess={(res, file, data) => ({ data })}\n      renderResult={f => f.data}\n      limit={3}\n      onStart={f => console.log(f)}\n    />\n  )\n}\n'},1172:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(297);n.default=function(){return a.a.createElement(r.a.Image,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",name:"file",onSuccess:function(e,n,t){return{data:t}},renderResult:function(e){return e.data},limit:3,onStart:function(e){return console.log(e)},renderContent:function(e,n,t,o){return console.log(e,n,t,o),a.a.createElement("div",{onClick:function(){return i.a.info("i am click")}},a.a.createElement("img",{width:"100%",src:e,alt:"not found"}))}})}},1173:function(e,n){e.exports='/**\n * cn - 自定义结果内容\n *    -- 使用  renderContent 可以自定义上传之后的图片结果.\n * en - Custom result content\n *    -- Use renderContent to customize the image results after uploading.\n */\nimport React from \'react\'\nimport { Upload, Message } from \'shineout\'\n\nexport default function() {\n  return (\n    <Upload.Image\n      action="//jsonplaceholder.typicode.com/posts"\n      accept="image/*"\n      name="file"\n      onSuccess={(res, file, data) => ({ data })}\n      renderResult={f => f.data}\n      limit={3}\n      onStart={f => console.log(f)}\n      renderContent={(d, v, i, values) => {\n        console.log(d, v, i, values)\n        return (\n          <div onClick={() => Message.info(\'i am click\')}>\n            <img width="100%" src={d} alt="not found" />\n          </div>\n        )\n      }}\n    />\n  )\n}\n'},1174:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312);n.default=function(){return a.a.createElement(r.a.Button,{action:"//jsonplaceholder.typicode.com/posts",name:"file",onSuccess:function(e,n){return n.name},loading:"正在上传...",placeholder:"点击上传",type:"primary"})}},1175:function(e,n){e.exports='/**\n * cn - 按钮上传\n *    -- 使用 Upload.Button 展示单个文件的上传进度\n * en - Button\n *    -- Use Upload.Button to show the upload progress of individual files\n */\nimport React from \'react\'\nimport { Upload } from \'shineout\'\n\nexport default function() {\n  return (\n    <Upload.Button\n      action="//jsonplaceholder.typicode.com/posts"\n      name="file"\n      onSuccess={(res, file) => file.name}\n      loading="正在上传..."\n      placeholder="点击上传"\n      type="primary"\n    />\n  )\n}\n'},1176:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312);n.default=function(){return a.a.createElement(r.a.Image,{defaultValue:[{data:"/images/1_b.jpg"}],action:"//jsonplaceholder.typicode.com/posts",renderResult:function(e){return e.data},onSuccess:function(e,n,t){return{data:t}},removeConfirm:"Are you sure to delete it ?"})}},1177:function(e,n){e.exports="/**\n * cn - 删除确认\n *    -- 设置 removeConfirm 属性来开启删除前确认\n * en - Remove Confirm\n *    -- Set the removeConfirm property to enable confirmation before deleting\n */\nimport React from 'react'\nimport { Upload } from 'shineout'\n\nexport default () => (\n  <Upload.Image\n    defaultValue={[{ data: '/images/1_b.jpg' }]}\n    action=\"//jsonplaceholder.typicode.com/posts\"\n    renderResult={d => d.data}\n    onSuccess={(res, file, data) => ({ data })}\n    removeConfirm=\"Are you sure to delete it ?\"\n  />\n)\n"},1178:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(181);n.default=function(){return a.a.createElement(r.a.Image,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",name:"file",onSuccess:function(e,n,t){return{data:t}},width:200,height:100,limit:1,renderResult:function(e){return e.data},validator:{imageSize:function(e){return 200!==e.width||100!==e.height?new Error("only allow 200px * 100px"):void 0},ext:function(e){return["jpg","png"].includes(e)?void 0:new Error("File extension must be jpg or png")}}},a.a.createElement("div",{style:{margin:"auto",color:"#999",textAlign:"center"}},a.a.createElement(i.a,{name:"upload"})," Upload Image",a.a.createElement("br",null),"Allow size 200 * 100"))}},1179:function(e,n){e.exports="/**\n * cn - 校验\n *    -- 通过 validator.imageSize 校验图片长宽，本例为 200px * 100px\n * en - Validator\n *    -- Set validator.imageSize to validate the width and height of the image.\n */\nimport React from 'react'\nimport { Upload } from 'shineout'\nimport FontAwesome from '../Icon/FontAwesome'\n\nexport default function() {\n  return (\n    <Upload.Image\n      action=\"//jsonplaceholder.typicode.com/posts\"\n      accept=\"image/*\"\n      name=\"file\"\n      onSuccess={(res, file, data) => ({ data })}\n      width={200}\n      height={100}\n      limit={1}\n      renderResult={f => f.data}\n      validator={{\n        imageSize: img => (img.width !== 200 || img.height !== 100 ? new Error('only allow 200px * 100px') : undefined),\n        ext: ext => (['jpg', 'png'].includes(ext) ? undefined : new Error('File extension must be jpg or png')),\n      }}\n    >\n      <div style={{ margin: 'auto', color: '#999', textAlign: 'center' }}>\n        <FontAwesome name=\"upload\" /> Upload Image\n        <br />\n        Allow size 200 * 100\n      </div>\n    </Upload.Image>\n  )\n}\n"},1180:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(66),l=t(181);n.default=function(){return a.a.createElement("div",null,a.a.createElement(r.a,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",multiple:!0,name:"file",onSuccess:function(e,n){return n.name},style:{width:300,marginBottom:30},validator:{size:function(e){return 10240<e?new Error("max file size is 10KB"):void 0}},validatorHandle:function(e,n){return console.log(e,n),!0}},a.a.createElement(i.a,null,a.a.createElement(l.a,{name:"upload"})," Upload file")),a.a.createElement(r.a.Image,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",multiple:!0,name:"file",onSuccess:function(e,n,t){return{data:t}},validator:{size:function(e){return 10240<e?new Error("max file size is 10KB"):void 0}},renderResult:function(e){return e.data}}))}},1181:function(e,n){e.exports='/**\n * cn - 文件大小\n *    -- 文件大小校验，本例为 10KB\n * en -\n *    -- Set validator.size to validate the size of the file. This example is 10KB.\n */\nimport React from \'react\'\nimport { Upload, Button } from \'shineout\'\nimport FontAwesome from \'../Icon/FontAwesome\'\n\nexport default function() {\n  return (\n    <div>\n      <Upload\n        action="//jsonplaceholder.typicode.com/posts"\n        accept="image/*"\n        multiple\n        name="file"\n        onSuccess={(res, file) => file.name}\n        style={{ width: 300, marginBottom: 30 }}\n        validator={{\n          size: s => (s > 10240 ? new Error(\'max file size is 10KB\') : undefined),\n        }}\n        validatorHandle={(error, file) => {\n          console.log(error, file)\n          return true\n        }}\n      >\n        <Button>\n          <FontAwesome name="upload" /> Upload file\n        </Button>\n      </Upload>\n\n      <Upload.Image\n        action="//jsonplaceholder.typicode.com/posts"\n        accept="image/*"\n        multiple\n        name="file"\n        onSuccess={(res, file, data) => ({ data })}\n        validator={{\n          size: s => (s > 10240 ? new Error(\'max file size is 10KB\') : undefined),\n        }}\n        renderResult={f => f.data}\n      />\n    </div>\n  )\n}\n'},1182:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(66),l=t(181);n.default=function(){return a.a.createElement("div",null,a.a.createElement(r.a,{action:"/path-no-exist",accept:"image/*",name:"file",onSuccess:function(e,n){return n.name},onHttpError:function(e){return console.log(e),404===e.status?"Url not found.":"Upload Fail."},limit:3,style:{width:300,marginBottom:30}},a.a.createElement(i.a,null,a.a.createElement(l.a,{name:"upload"})," Upload file")),a.a.createElement(r.a.Image,{action:"/path-no-exist",accept:"image/*",name:"file",onSuccess:function(e,n,t){return{data:t}},onHttpError:function(e){return console.log(e),404===e.status?"Url not found.":"Upload Fail."},renderResult:function(e){return e.data}}))}},1183:function(e,n){e.exports="/**\n * cn - 异常处理\n *    -- onHttpError 用来处理上传到服务器返回的异常\n * en - Error\n *    -- Set onHttpError to handle exceptions returned by uploading to the server.\n */\nimport React from 'react'\nimport { Upload, Button } from 'shineout'\nimport FontAwesome from '../Icon/FontAwesome'\n\nexport default function() {\n  return (\n    <div>\n      <Upload\n        action=\"/path-no-exist\"\n        accept=\"image/*\"\n        name=\"file\"\n        onSuccess={(res, file) => file.name}\n        onHttpError={xhr => {\n          console.log(xhr)\n          if (xhr.status === 404) return 'Url not found.'\n          return 'Upload Fail.'\n        }}\n        limit={3}\n        style={{ width: 300, marginBottom: 30 }}\n      >\n        <Button>\n          <FontAwesome name=\"upload\" /> Upload file\n        </Button>\n      </Upload>\n\n      <Upload.Image\n        action=\"/path-no-exist\"\n        accept=\"image/*\"\n        name=\"file\"\n        onSuccess={(res, file, data) => ({ data })}\n        onHttpError={xhr => {\n          console.log(xhr)\n          if (xhr.status === 404) return 'Url not found.'\n          return 'Upload Fail.'\n        }}\n        renderResult={f => f.data}\n      />\n    </div>\n  )\n}\n"},1184:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(66),l=t(181),s=function(e){var n=e.file,t=e.onLoad,o=e.onError,a=e.onProgress,r=new XMLHttpRequest;r.open("post","//jsonplaceholder.typicode.com/posts");var i=new FormData;return i.append("test",n),r.upload.onprogress=a,r.onload=function(){return t(r)},r.onerror=function(){return o({statusText:"error message"})},r.send(i),r};n.default=function(){return a.a.createElement(r.a,{accept:"image/*",onSuccess:function(e,n){return{name:"upload ".concat(n.name)}},limit:3,style:{width:300},request:s,renderResult:function(e){return e.name}},a.a.createElement(i.a,null,a.a.createElement(l.a,{name:"upload"})," Upload file"))}},1185:function(e,n){e.exports="/**\n * cn - 自定义上传\n *    -- 通过 request 函数，替代默认上传方法\n * en - Custom Request\n *    -- Set request property to use your own XMLHttpRequest.\n */\nimport React from 'react'\nimport { Upload, Button } from 'shineout'\nimport FontAwesome from '../Icon/FontAwesome'\n\nconst request = options => {\n  const { file, onLoad, onError, onProgress } = options\n  const xhr = new XMLHttpRequest()\n  xhr.open('post', '//jsonplaceholder.typicode.com/posts')\n\n  const data = new FormData()\n  data.append('test', file)\n  xhr.upload.onprogress = onProgress\n  xhr.onload = () => onLoad(xhr)\n  xhr.onerror = () => onError({ statusText: 'error message' })\n  xhr.send(data)\n\n  return xhr\n}\n\nexport default function() {\n  return (\n    <Upload\n      accept=\"image/*\"\n      onSuccess={(res, file) => ({ name: `upload ${file.name}` })}\n      limit={3}\n      style={{ width: 300 }}\n      request={request}\n      renderResult={d => d.name}\n    >\n      <Button>\n        <FontAwesome name=\"upload\" />\n        &nbsp;Upload file\n      </Button>\n    </Upload>\n  )\n}\n"},1186:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=function(e){var n=e.file,t=e.onLoad,o=e.onError,a=new FileReader;a.addEventListener("load",function(){t({status:200,response:a.result})}),a.addEventListener("error",function(){o({statusText:"Oops, something went wrong"})}),a.readAsDataURL(n)};n.default=function(){return a.a.createElement(r.a.Image,{accept:"image/*",onSuccess:function(e,n){return{name:n.name,src:e}},request:i,renderResult:function(e){return e.src}})}},1187:function(e,n){e.exports="/**\n * cn -\n *    -- 使用 request 略过上传过程\n * en -\n *    -- ignore request with request\n */\nimport React from 'react'\nimport { Upload } from 'shineout'\n\nconst request = options => {\n  const { file, onLoad, onError } = options\n  const reader = new FileReader()\n  reader.addEventListener('load', () => {\n    onLoad({ status: 200, response: reader.result })\n  })\n  reader.addEventListener('error', () => {\n    onError({ statusText: 'Oops, something went wrong' })\n  })\n  reader.readAsDataURL(file)\n}\n\nexport default function() {\n  return (\n    <Upload.Image\n      accept=\"image/*\"\n      onSuccess={(dataURL, file) => ({ name: file.name, src: dataURL })}\n      request={request}\n      renderResult={d => d.src}\n    />\n  )\n}\n"},1188:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(66),l=t(181),s=function(e){var o=e.file,a=e.onLoad,r=e.onError,i=e.onProgress,l=new XMLHttpRequest;l.open("post","//jsonplaceholder.typicode.com/posts");var n=new window.JSZip;return n.file(o.name,o),n.generateInternalStream({type:"blob"}).accumulate(function(e){i(e,"zipping...")}).then(function(e){var n=new File([e],"".concat(o.name,".zip")),t=new FormData;t.append("file",n),l.upload.onprogress=function(e){return i(e,"sending...")},l.onload=function(){return a(l)},l.onerror=function(){return r({statusText:"error message"})},l.send(t)}),l};n.default=function(){return a.a.createElement(r.a,{onSuccess:function(e,n){return{name:"upload ".concat(n.name)}},limit:3,style:{width:300},request:s,renderResult:function(e){return e.name}},a.a.createElement(i.a,null,a.a.createElement(l.a,{name:"upload"})," Upload file"))}},1189:function(e,n){e.exports="/**\n * cn -\n *    -- 此事例演示通过自定义函数压缩文件后上传\n * en -\n *    -- Zip file and upload.\n */\nimport React from 'react'\nimport { Upload, Button } from 'shineout'\nimport FontAwesome from '../Icon/FontAwesome'\n\nconst request = options => {\n  const { file, onLoad, onError, onProgress } = options\n\n  const xhr = new XMLHttpRequest()\n  xhr.open('post', '//jsonplaceholder.typicode.com/posts')\n\n  const zip = new window.JSZip()\n  zip.file(file.name, file)\n  zip\n    .generateInternalStream({ type: 'blob' })\n    .accumulate(e => {\n      onProgress(e, 'zipping...')\n    })\n    .then(content => {\n      const zipFile = new File([content], `${file.name}.zip`)\n      const data = new FormData()\n      data.append('file', zipFile)\n      xhr.upload.onprogress = m => onProgress(m, 'sending...')\n      xhr.onload = () => onLoad(xhr)\n      xhr.onerror = () => onError({ statusText: 'error message' })\n      xhr.send(data)\n    })\n\n  return xhr\n}\n\nexport default function() {\n  return (\n    <Upload\n      onSuccess={(res, file) => ({ name: `upload ${file.name}` })}\n      limit={3}\n      style={{ width: 300 }}\n      request={request}\n      renderResult={d => d.name}\n    >\n      <Button>\n        <FontAwesome name=\"upload\" /> Upload file\n      </Button>\n    </Upload>\n  )\n}\n"},1190:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(66),l=t(181);n.default=function(){var e=[{name:"test file.png",url:"../images/1_s.jpg"}];return a.a.createElement("div",null,a.a.createElement(r.a,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",multiple:!0,limit:2,name:"file",onSuccess:function(e,n){return{name:n.name}},style:{width:300,marginBottom:30},defaultValue:e,renderResult:function(e){return e.name}},a.a.createElement(i.a,null,a.a.createElement(l.a,{name:"upload"})," Upload file")),a.a.createElement("br",null),a.a.createElement(r.a.Image,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",multiple:!0,name:"file",limit:1,recoverAble:!0,onSuccess:function(e,n,t){return{url:t}},renderResult:function(e){return e.url},defaultValue:e}))}},1191:function(e,n){e.exports='/**\n * cn - 默认值\n *    -- 默认值示例\n * en - defaultValue\n *    -- defaultValue example\n */\nimport React from \'react\'\nimport { Upload, Button } from \'shineout\'\nimport FontAwesome from \'../Icon/FontAwesome\'\n\nexport default function() {\n  const defaultValue = [\n    {\n      name: \'test file.png\',\n      url: \'../images/1_s.jpg\',\n    },\n  ]\n\n  return (\n    <div>\n      <Upload\n        action="//jsonplaceholder.typicode.com/posts"\n        accept="image/*"\n        multiple\n        limit={2}\n        name="file"\n        onSuccess={(res, file) => ({ name: file.name })}\n        style={{ width: 300, marginBottom: 30 }}\n        defaultValue={defaultValue}\n        renderResult={f => f.name}\n      >\n        <Button>\n          <FontAwesome name="upload" /> Upload file\n        </Button>\n      </Upload>\n      <br />\n      <Upload.Image\n        action="//jsonplaceholder.typicode.com/posts"\n        accept="image/*"\n        multiple\n        name="file"\n        limit={1}\n        recoverAble\n        onSuccess={(res, file, data) => ({ url: data })}\n        renderResult={f => f.url}\n        defaultValue={defaultValue}\n      />\n    </div>\n  )\n}\n'},1192:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(312),i=t(181),l={background:"#fafafa",textAlign:"center",width:"100%",padding:20};function s(){return a.a.createElement(r.a.Image,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",name:"file",onSuccess:function(e,n,t){return{data:t}},renderResult:function(e){return e.data},limit:3,onStart:function(e){return console.log(e)},width:250,drop:!0,disabled:!0},a.a.createElement("div",{style:l},a.a.createElement(i.a,{style:{color:"#409dfd",fontSize:20},name:"image"}),a.a.createElement("p",null,"Click or Drag image to upload")))}function c(){return a.a.createElement(r.a,{action:"//jsonplaceholder.typicode.com/posts",multiple:!0,name:"file",onSuccess:function(e,n){return n.name},limit:3,style:{width:400},drop:!0,disabled:!0},a.a.createElement("div",{style:l},a.a.createElement(i.a,{style:{color:"#409dfd",fontSize:28},name:"archive"}),a.a.createElement("p",{style:{marginTop:14}},"Click or drag file to this area to upload")))}n.default=function(){return a.a.createElement("div",null,a.a.createElement(s,null),a.a.createElement("br",null),a.a.createElement(c,null))}},1193:function(e,n){e.exports="/**\n * cn - 拖拽上传\n *    -- 设置 drop 来支持拖拽上传\n * en - Drag and Drop\n *    -- set drop to Drag files to upload.\n */\nimport React from 'react'\nimport { Upload } from 'shineout'\nimport FontAwesome from '../Icon/FontAwesome'\n\nconst placholderStyle = { background: '#fafafa', textAlign: 'center', width: '100%', padding: 20 }\n\nfunction DraggerImage() {\n  return (\n    <Upload.Image\n      action=\"//jsonplaceholder.typicode.com/posts\"\n      accept=\"image/*\"\n      name=\"file\"\n      onSuccess={(res, file, data) => ({ data })}\n      renderResult={f => f.data}\n      limit={3}\n      onStart={f => console.log(f)}\n      width={250}\n      drop\n      disabled\n    >\n      <div style={placholderStyle}>\n        <FontAwesome style={{ color: '#409dfd', fontSize: 20 }} name=\"image\" />\n        <p>Click or Drag image to upload</p>\n      </div>\n    </Upload.Image>\n  )\n}\n\nfunction DraggerFile() {\n  return (\n    <Upload\n      action=\"//jsonplaceholder.typicode.com/posts\"\n      multiple\n      name=\"file\"\n      onSuccess={(res, file) => file.name}\n      limit={3}\n      style={{ width: 400 }}\n      drop\n      disabled\n    >\n      <div style={placholderStyle}>\n        <FontAwesome style={{ color: '#409dfd', fontSize: 28 }} name=\"archive\" />\n        <p style={{ marginTop: 14 }}>Click or drag file to this area to upload</p>\n      </div>\n    </Upload>\n  )\n}\n\nexport default function() {\n  return (\n    <div>\n      <DraggerImage />\n      <br />\n      <DraggerFile />\n    </div>\n  )\n}\n"},297:function(e,n,t){"use strict";var o=t(0),p=t.n(o),a=t(46),r=t.n(a),m=t(107),i=t(4),l=t(5),s=t(1),c=t(6),u=t(7),d=t(2),f=t(41),h=t(17),g=t(120),v=t(22);function b(o){return function(){var e,n=Object(d.a)(o);if(function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()){var t=Object(d.a)(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Object(u.a)(this,e)}}var y=function(e){Object(c.a)(o,e);var t=b(o);function o(e){var n;return Object(i.a)(this,o),(n=t.call(this,e)).state={messages:[]},n.removeMessage=n.removeMessage.bind(Object(s.a)(n)),n.handleClassName=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"top",n=1<arguments.length?arguments[1]:void 0;return Object(m.a)("item","item-".concat(n?"dismissed":"show","-").concat(e))},n.handleStyle=function(e,n,t){if(!e||null==n)return null;var o={};switch(t){case"bottom-right":case"bottom-left":break;default:o={zIndex:-1,opacity:0,marginTop:-n}}return o},n}return Object(l.a)(o,[{key:"addMessage",value:function(n){var e=this,t=Object(v.c)();return this.setState(Object(f.a)(function(e){e.messages.push(Object.assign({id:t},n))})),0<n.duration&&setTimeout(function(){e.setState(Object(f.a)(function(e){e.messages.forEach(function(e){e.id===t&&(e.dismiss=!0)})}))},1e3*n.duration),this.closeMessageForAnimation.bind(this,t,200,200)}},{key:"removeMessage",value:function(n){var t,e=this.state.messages.filter(function(e){return e.id!==n||(e.onClose&&(t=e.onClose),!1)});0===e.length?this.props.onDestory():this.setState({messages:e}),t&&t()}},{key:"closeMessageForAnimation",value:function(){for(var e=this,n=arguments.length,t=new Array(n),o=0;o<n;o++)t[o]=arguments[o];var a=t[0],r=t[1],i=t[2];r?(this.setState(Object(f.a)(function(e){e.messages.forEach(function(e){e.id===a&&(e.dismiss=!0,e.h=i+20)})})),setTimeout(function(){e.removeMessage(a)},r)):this.removeMessage(a)}},{key:"closeEvent",value:function(e,n){if(0===n)return this.removeMessage.bind(this,e)}},{key:"render",value:function(){var d=this;return[this.state.messages.map(function(e){var n=e.id,t=e.type,o=e.content,a=e.dismiss,r=e.h,i=e.title,l=e.top,s=e.className,c=e.position,u=e.hideClose;return p.a.createElement("div",{key:n,className:"".concat(d.handleClassName(c,a)," ").concat(s),style:d.handleStyle(a,r,c)},p.a.createElement(g.a,{outAnimation:!0,className:Object(m.a)("msg"),dismiss:a,hideClose:u,onClose:d.closeMessageForAnimation.bind(d,n),icon:!0,iconSize:i?20:14,style:{top:l},type:t},i&&p.a.createElement("h3",null,i),o))})]}}]),o}(h.b);y.displayName="ShineoutMessage";var w=y,x={},E={};function R(e){x[e]&&(r.a.unmountComponentAtNode(x[e]),document.body.removeChild(x[e]),delete x[e]),E[e]&&delete E[e]}function S(a){return new Promise(function(n){var e,t,o=E[a];o?n(o):r.a.render(p.a.createElement(w,{ref:function(e){E[a]=e,n(e)},onDestory:R.bind(null,a)}),(e=a,(t=document.createElement("div")).className=Object(m.a)("_",e),document.body.appendChild(t),x[e]=t))})}var U={},j=function(m){return function(n,t,e){var o=Object.assign({},U,e);t=[t,U.duration,3].find(function(e){return"number"==typeof e});var a=o.onClose,r=o.position,i=void 0===r?"top":r,l=o.title,s=o.className,c=void 0===s?"":s,u=o.top,d=void 0===u?"auto":u,p=o.hideClose;return S(i).then(function(e){return e.addMessage({content:n,duration:t,type:m,onClose:a,title:l,className:c,top:d,position:i,hideClose:p})})}};n.a={show:j("default"),success:j("success"),info:j("info"),warn:j("warning"),warning:j("warning"),danger:j("danger"),error:j("danger"),close:function(e){e?R(e):["top","middle","top-left","top-right","bottom-left","bottom-right"].forEach(function(e){R(e)})},setOptions:function(e){U=e}}}}]);